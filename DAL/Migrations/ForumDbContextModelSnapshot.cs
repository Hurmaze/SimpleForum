// <auto-generated />
using System;
using DAL.DbAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    partial class ForumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Credentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Credentials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 82, 211, 234, 79, 195, 143, 253, 183, 24, 24, 132, 12, 14, 220, 206, 177, 16, 248, 9, 221, 130, 152, 21, 238, 57, 222, 119, 253, 2, 38, 97, 13, 152, 96, 53, 239, 65, 192, 16, 252, 55, 126, 151, 61, 223, 251, 152, 205, 69, 232, 11, 0, 219, 68, 221, 216, 225, 134, 216, 66, 25, 203, 23, 71 },
                            PasswordSalt = new byte[] { 88, 83, 161, 164, 78, 87, 146, 71, 0, 126, 165, 242, 144, 84, 58, 216, 206, 179, 28, 128, 223, 170, 10, 135, 112, 42, 11, 71, 41, 198, 77, 173, 174, 17, 65, 142, 218, 29, 171, 101, 138, 220, 134, 1, 146, 108, 140, 104, 19, 119, 200, 48, 33, 98, 23, 172, 64, 101, 121, 229, 94, 144, 244, 249, 33, 214, 156, 131, 222, 155, 108, 103, 36, 95, 220, 238, 77, 77, 15, 29, 211, 6, 4, 122, 38, 145, 135, 69, 26, 222, 223, 166, 200, 114, 224, 19, 187, 156, 175, 225, 39, 170, 49, 53, 44, 89, 96, 74, 215, 160, 167, 232, 2, 39, 45, 218, 49, 124, 11, 153, 44, 139, 35, 222, 114, 105, 233, 250 },
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 108, 67, 129, 71, 5, 88, 244, 52, 177, 184, 142, 222, 42, 99, 89, 221, 1, 240, 253, 27, 177, 10, 14, 128, 151, 115, 169, 111, 55, 131, 113, 28, 213, 206, 230, 49, 76, 110, 54, 32, 126, 153, 44, 189, 5, 0, 230, 50, 52, 149, 20, 58, 157, 8, 98, 4, 117, 100, 74, 145, 188, 225, 44, 180 },
                            PasswordSalt = new byte[] { 158, 214, 243, 190, 224, 15, 210, 163, 189, 112, 172, 113, 240, 202, 153, 99, 1, 107, 230, 231, 46, 163, 236, 56, 124, 10, 200, 238, 202, 0, 74, 22, 220, 111, 202, 109, 67, 92, 189, 213, 135, 183, 221, 209, 67, 246, 231, 209, 59, 182, 55, 19, 212, 179, 143, 156, 205, 204, 151, 150, 75, 4, 71, 188, 20, 69, 162, 23, 166, 118, 138, 158, 11, 113, 223, 247, 225, 101, 245, 117, 184, 42, 243, 133, 218, 109, 57, 113, 20, 142, 21, 114, 134, 171, 75, 89, 83, 139, 13, 75, 163, 230, 68, 233, 144, 208, 89, 120, 166, 86, 8, 202, 201, 65, 19, 49, 130, 243, 73, 35, 50, 45, 211, 54, 14, 2, 63, 1 },
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 25, 253, 52, 190, 123, 194, 234, 204, 202, 42, 185, 26, 224, 97, 165, 5, 255, 96, 189, 253, 146, 130, 166, 68, 157, 81, 237, 116, 46, 74, 105, 149, 198, 208, 110, 89, 180, 228, 175, 170, 228, 83, 17, 228, 42, 61, 218, 209, 192, 171, 217, 13, 49, 77, 16, 110, 185, 25, 122, 169, 126, 231, 72, 36 },
                            PasswordSalt = new byte[] { 109, 200, 207, 122, 243, 65, 207, 128, 177, 205, 220, 152, 50, 20, 89, 60, 76, 67, 151, 148, 125, 57, 140, 22, 47, 204, 254, 228, 16, 214, 160, 70, 27, 12, 102, 13, 196, 131, 117, 77, 48, 97, 88, 135, 244, 83, 47, 50, 177, 200, 52, 22, 103, 81, 216, 0, 222, 91, 229, 2, 205, 241, 216, 121, 244, 131, 123, 118, 220, 45, 211, 74, 187, 189, 37, 254, 79, 255, 213, 194, 102, 66, 210, 238, 202, 247, 78, 253, 21, 119, 149, 96, 152, 50, 227, 47, 12, 29, 112, 29, 131, 53, 44, 252, 19, 38, 64, 2, 46, 68, 151, 186, 173, 71, 218, 161, 137, 12, 228, 43, 101, 222, 241, 50, 125, 59, 132, 241 },
                            RoleId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            PasswordHash = new byte[] { 66, 104, 115, 32, 190, 172, 184, 192, 20, 64, 140, 32, 144, 127, 25, 215, 189, 204, 2, 130, 236, 204, 37, 52, 34, 114, 179, 212, 175, 223, 160, 171, 99, 124, 202, 84, 62, 155, 203, 124, 189, 216, 21, 38, 227, 241, 132, 148, 165, 0, 86, 133, 40, 52, 206, 138, 169, 99, 250, 130, 255, 21, 20, 115 },
                            PasswordSalt = new byte[] { 95, 66, 24, 100, 107, 200, 76, 43, 212, 221, 54, 6, 29, 29, 251, 123, 23, 24, 2, 25, 207, 177, 79, 23, 183, 181, 180, 8, 165, 79, 56, 75, 242, 133, 106, 77, 47, 102, 72, 57, 212, 86, 105, 208, 53, 32, 208, 117, 191, 93, 205, 118, 165, 107, 74, 85, 149, 110, 150, 181, 142, 69, 213, 10, 149, 86, 197, 150, 54, 81, 58, 161, 112, 172, 146, 114, 246, 110, 75, 234, 99, 191, 95, 10, 14, 249, 183, 201, 7, 206, 208, 105, 225, 11, 174, 227, 247, 13, 229, 121, 99, 76, 92, 22, 153, 51, 17, 61, 184, 128, 255, 143, 195, 141, 148, 193, 150, 126, 149, 29, 71, 234, 68, 169, 28, 247, 197, 168 },
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            PasswordHash = new byte[] { 33, 103, 168, 195, 193, 227, 104, 217, 148, 250, 194, 117, 164, 192, 161, 209, 40, 162, 250, 155, 189, 249, 35, 214, 29, 144, 13, 71, 159, 216, 249, 245, 40, 34, 140, 81, 198, 40, 147, 222, 101, 165, 173, 1, 151, 195, 255, 17, 191, 31, 189, 68, 82, 242, 55, 17, 246, 110, 173, 199, 12, 133, 15, 199 },
                            PasswordSalt = new byte[] { 179, 215, 240, 224, 166, 244, 163, 56, 11, 49, 5, 213, 5, 90, 243, 2, 122, 152, 145, 219, 141, 241, 104, 190, 57, 38, 60, 57, 36, 27, 230, 91, 167, 52, 192, 14, 160, 228, 57, 34, 21, 186, 13, 84, 7, 249, 169, 106, 3, 91, 47, 211, 141, 12, 142, 241, 249, 17, 102, 26, 58, 197, 28, 36, 162, 191, 38, 235, 163, 236, 155, 188, 128, 89, 58, 9, 112, 203, 121, 245, 90, 243, 247, 101, 156, 206, 90, 69, 226, 170, 209, 49, 94, 155, 3, 152, 215, 205, 80, 184, 174, 124, 176, 86, 250, 72, 89, 214, 144, 53, 204, 135, 190, 209, 220, 100, 193, 210, 29, 29, 101, 99, 13, 170, 104, 38, 139, 49 },
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.ForumThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Threads", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Elephants are the largest existing land animals. Three living species are currently recognised: the African bush elephant, the African forest elephant, and the Asian elephant. They are an informal grouping within the subfamily Elephantinae of the order Proboscidea; extinct members include the mastodons.",
                            ThemeId = 1,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8488),
                            Title = "Super elephants"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "Let`s talk about Mykola Khvylovy and his novel 'I(Romance)' ",
                            ThemeId = 2,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8494),
                            Title = "Mykola Khvylovy"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Content = "Man i love elephants!I recently learned that elephants drink up to 300 liters of water a day!",
                            ThreadId = 1,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8514)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            Content = "My favourite elephant is Asian elephant",
                            ThreadId = 1,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8518)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 5,
                            Content = "Books are great you know.",
                            ThreadId = 2,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8521)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Content = "Read recently about Segriy Zhadan... He is cool.",
                            ThreadId = 2,
                            TimeCreated = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8524)
                        });
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "user"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Themes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ThemeName = "Books"
                        },
                        new
                        {
                            Id = 2,
                            ThemeName = "Elephants"
                        },
                        new
                        {
                            Id = 3,
                            ThemeName = "Other"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("RegistrationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CredentialsId = 0,
                            Email = "user1@gmail.com",
                            Nickname = "user1",
                            RegistrationTime = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8258)
                        },
                        new
                        {
                            Id = 2,
                            CredentialsId = 0,
                            Email = "user2@gmail.com",
                            RegistrationTime = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8303)
                        },
                        new
                        {
                            Id = 3,
                            CredentialsId = 0,
                            Email = "user3@gmail.com",
                            Nickname = "user3",
                            RegistrationTime = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8307)
                        },
                        new
                        {
                            Id = 4,
                            CredentialsId = 0,
                            Email = "moderator1@gmail.com",
                            Nickname = "moderator1",
                            RegistrationTime = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8310)
                        },
                        new
                        {
                            Id = 5,
                            CredentialsId = 0,
                            Email = "admin1@gmail.com",
                            Nickname = "admin1",
                            RegistrationTime = new DateTime(2022, 7, 4, 13, 20, 26, 715, DateTimeKind.Local).AddTicks(8312)
                        });
                });

            modelBuilder.Entity("DAL.Entities.Credentials", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Credentials")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne("Credentials")
                        .HasForeignKey("DAL.Entities.Credentials", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ForumThread", b =>
                {
                    b.HasOne("DAL.Entities.User", "Author")
                        .WithMany("Threads")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Entities.Theme", "Theme")
                        .WithMany("ForumThreads")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("DAL.Entities.Post", b =>
                {
                    b.HasOne("DAL.Entities.User", "Author")
                        .WithMany("ThreadPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Entities.ForumThread", "Thread")
                        .WithMany("ThreadPosts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("DAL.Entities.ForumThread", b =>
                {
                    b.Navigation("ThreadPosts");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("DAL.Entities.Theme", b =>
                {
                    b.Navigation("ForumThreads");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("ThreadPosts");

                    b.Navigation("Threads");
                });
#pragma warning restore 612, 618
        }
    }
}
