// <auto-generated />
using System;
using DAL.DbAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations.AuthenticationDb
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20220625150602_SeedingUpdated")]
    partial class SeedingUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Account.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@gmail.com",
                            PasswordHash = new byte[] { 41, 1, 202, 217, 199, 20, 212, 242, 221, 86, 196, 176, 142, 100, 199, 9, 92, 254, 164, 173, 53, 184, 157, 240, 120, 179, 217, 20, 24, 10, 115, 138, 124, 166, 108, 127, 22, 50, 97, 160, 98, 57, 217, 59, 135, 75, 50, 127, 68, 242, 95, 4, 7, 45, 224, 21, 108, 237, 165, 235, 246, 67, 66, 153 },
                            PasswordSalt = new byte[] { 242, 111, 80, 153, 101, 172, 255, 86, 166, 190, 229, 66, 73, 51, 120, 219, 74, 42, 252, 30, 208, 94, 37, 19, 63, 103, 24, 6, 53, 127, 95, 250, 149, 88, 239, 96, 36, 88, 46, 196, 111, 200, 249, 220, 237, 83, 88, 246, 64, 74, 46, 85, 203, 195, 255, 251, 220, 56, 94, 21, 57, 28, 134, 98, 248, 108, 246, 243, 204, 105, 120, 53, 177, 161, 39, 226, 59, 58, 102, 89, 199, 162, 37, 213, 165, 118, 231, 78, 237, 107, 198, 232, 117, 187, 34, 16, 153, 91, 177, 219, 97, 197, 104, 143, 14, 191, 80, 233, 230, 220, 94, 94, 250, 238, 226, 51, 13, 2, 212, 29, 175, 111, 95, 126, 137, 230, 202, 58 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@gmail.com",
                            PasswordHash = new byte[] { 178, 131, 134, 128, 77, 218, 51, 216, 233, 248, 205, 76, 101, 138, 249, 105, 61, 180, 220, 104, 144, 20, 177, 170, 162, 242, 214, 88, 228, 174, 128, 167, 80, 18, 101, 29, 154, 12, 206, 154, 48, 149, 92, 80, 113, 162, 254, 247, 81, 115, 201, 4, 172, 42, 71, 151, 26, 193, 36, 214, 10, 42, 60, 94 },
                            PasswordSalt = new byte[] { 3, 201, 100, 248, 221, 100, 132, 228, 168, 2, 83, 206, 84, 229, 246, 186, 224, 146, 153, 74, 20, 30, 29, 123, 203, 253, 124, 59, 195, 16, 123, 250, 237, 64, 205, 55, 35, 110, 0, 149, 77, 159, 236, 76, 134, 198, 71, 88, 190, 89, 247, 84, 83, 152, 46, 29, 121, 28, 201, 90, 21, 152, 97, 239, 223, 174, 225, 221, 12, 187, 84, 44, 108, 19, 181, 255, 8, 14, 205, 104, 24, 134, 78, 171, 128, 213, 81, 139, 212, 251, 132, 245, 18, 113, 71, 194, 45, 91, 204, 81, 172, 126, 97, 19, 82, 22, 4, 122, 87, 82, 138, 9, 26, 137, 124, 214, 138, 74, 246, 164, 160, 78, 169, 104, 117, 172, 238, 72 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@gmail.com",
                            PasswordHash = new byte[] { 0, 72, 159, 63, 232, 133, 84, 243, 138, 230, 158, 4, 148, 208, 73, 146, 57, 210, 218, 170, 186, 247, 48, 192, 122, 149, 12, 227, 135, 186, 249, 197, 109, 164, 231, 67, 106, 197, 187, 251, 47, 226, 63, 202, 1, 174, 149, 196, 15, 145, 23, 208, 232, 144, 198, 69, 8, 174, 191, 227, 47, 120, 53, 45 },
                            PasswordSalt = new byte[] { 100, 63, 46, 135, 109, 222, 133, 33, 136, 209, 12, 57, 1, 27, 179, 13, 88, 32, 140, 252, 233, 15, 214, 94, 230, 199, 132, 94, 128, 162, 166, 107, 128, 51, 22, 18, 243, 57, 95, 70, 181, 226, 84, 49, 12, 120, 38, 213, 26, 17, 110, 79, 149, 83, 11, 32, 180, 125, 244, 121, 245, 133, 145, 78, 17, 21, 82, 157, 107, 1, 77, 143, 198, 9, 89, 230, 134, 22, 197, 48, 170, 118, 107, 67, 146, 172, 196, 25, 142, 205, 131, 229, 208, 151, 194, 252, 172, 136, 38, 128, 218, 68, 151, 127, 110, 102, 251, 207, 167, 54, 182, 90, 88, 153, 176, 202, 77, 213, 81, 49, 162, 57, 82, 95, 136, 46, 202, 198 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "moderator1@gmail.com",
                            PasswordHash = new byte[] { 133, 60, 219, 137, 214, 40, 81, 254, 235, 25, 98, 86, 66, 88, 107, 211, 173, 92, 74, 196, 91, 85, 134, 137, 219, 35, 194, 239, 100, 39, 151, 121, 216, 245, 29, 172, 58, 56, 15, 95, 114, 35, 126, 205, 135, 170, 200, 87, 68, 115, 65, 135, 123, 12, 255, 14, 234, 208, 188, 153, 122, 178, 205, 103 },
                            PasswordSalt = new byte[] { 144, 243, 194, 134, 154, 8, 63, 126, 72, 204, 194, 169, 24, 28, 127, 194, 77, 125, 222, 228, 244, 81, 2, 235, 132, 43, 209, 6, 74, 157, 129, 189, 9, 249, 17, 76, 77, 246, 114, 31, 157, 126, 185, 210, 199, 67, 199, 138, 196, 217, 202, 0, 206, 227, 51, 123, 104, 72, 170, 195, 56, 157, 211, 83, 115, 76, 113, 240, 161, 185, 95, 139, 7, 115, 218, 46, 95, 4, 185, 44, 28, 199, 57, 245, 153, 240, 18, 125, 189, 135, 249, 165, 51, 27, 93, 199, 216, 46, 63, 186, 168, 68, 253, 107, 60, 183, 114, 102, 119, 203, 117, 92, 15, 206, 39, 37, 34, 172, 6, 194, 9, 198, 137, 130, 80, 225, 50, 127 },
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin1@gmail.com",
                            PasswordHash = new byte[] { 31, 82, 152, 159, 228, 99, 70, 100, 233, 149, 116, 194, 53, 179, 240, 186, 131, 58, 64, 64, 188, 117, 216, 112, 134, 155, 247, 51, 174, 124, 41, 134, 170, 217, 4, 145, 53, 71, 29, 170, 209, 215, 175, 93, 107, 230, 145, 214, 3, 154, 164, 147, 20, 124, 69, 70, 97, 79, 141, 68, 102, 171, 87, 0 },
                            PasswordSalt = new byte[] { 150, 141, 236, 199, 146, 116, 10, 106, 243, 17, 182, 173, 33, 247, 100, 255, 240, 192, 79, 4, 120, 129, 67, 166, 175, 222, 163, 184, 113, 254, 178, 55, 227, 155, 247, 185, 184, 56, 118, 61, 207, 31, 94, 213, 121, 255, 110, 126, 40, 173, 26, 195, 206, 112, 56, 26, 165, 117, 81, 132, 198, 19, 61, 2, 252, 99, 138, 206, 105, 214, 251, 79, 242, 133, 173, 62, 119, 204, 103, 139, 197, 29, 31, 1, 55, 133, 20, 145, 142, 173, 205, 135, 111, 169, 45, 229, 216, 128, 110, 21, 57, 247, 76, 139, 44, 130, 227, 35, 169, 77, 203, 170, 50, 18, 241, 244, 113, 47, 233, 223, 233, 147, 73, 232, 234, 169, 220, 242 },
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "user"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Account.Account", b =>
                {
                    b.HasOne("DAL.Entities.Account.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Account.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
