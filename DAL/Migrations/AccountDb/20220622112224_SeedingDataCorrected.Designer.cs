// <auto-generated />
using System;
using DAL.DbAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations.AuthenticationDb
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20220622112224_SeedingDataCorrected")]
    partial class SeedingDataCorrected
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Account.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@gmail.com",
                            PasswordHash = new byte[] { 98, 41, 10, 213, 219, 170, 121, 193, 254, 126, 189, 191, 108, 124, 136, 248, 229, 85, 191, 150, 126, 10, 9, 0, 190, 26, 63, 10, 87, 173, 85, 163, 77, 138, 167, 251, 221, 20, 111, 75, 196, 51, 212, 55, 198, 8, 73, 32, 255, 7, 207, 220, 42, 97, 11, 116, 34, 218, 191, 39, 252, 240, 31, 231 },
                            PasswordSalt = new byte[] { 164, 101, 247, 30, 100, 38, 189, 132, 160, 214, 242, 220, 191, 223, 83, 173, 162, 116, 22, 222, 18, 44, 24, 120, 83, 55, 5, 206, 38, 213, 31, 32, 79, 52, 38, 18, 138, 188, 175, 152, 35, 102, 185, 250, 238, 213, 129, 79, 32, 190, 107, 95, 60, 154, 49, 240, 82, 113, 148, 190, 252, 193, 181, 218, 218, 118, 83, 240, 228, 109, 211, 25, 56, 39, 173, 203, 180, 9, 234, 98, 139, 123, 104, 14, 51, 223, 101, 72, 16, 35, 139, 206, 36, 201, 128, 164, 229, 176, 183, 71, 237, 225, 89, 154, 33, 162, 120, 166, 45, 223, 255, 134, 122, 64, 113, 166, 93, 55, 53, 73, 43, 141, 245, 200, 252, 49, 54, 136 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@gmail.com",
                            PasswordHash = new byte[] { 47, 243, 107, 174, 7, 139, 164, 205, 76, 194, 130, 177, 28, 50, 127, 111, 132, 28, 66, 182, 13, 171, 197, 221, 251, 243, 3, 74, 251, 74, 35, 96, 43, 84, 137, 2, 106, 166, 227, 24, 6, 229, 252, 9, 217, 33, 17, 174, 9, 124, 119, 181, 239, 233, 156, 43, 1, 104, 155, 168, 39, 246, 59, 90 },
                            PasswordSalt = new byte[] { 200, 48, 1, 194, 197, 185, 98, 160, 160, 83, 103, 94, 113, 88, 44, 213, 19, 61, 10, 175, 50, 160, 206, 115, 206, 77, 10, 58, 159, 183, 89, 113, 28, 224, 72, 135, 33, 18, 42, 157, 104, 192, 220, 84, 40, 123, 141, 188, 68, 91, 29, 220, 17, 27, 79, 98, 171, 29, 61, 39, 171, 14, 72, 27, 217, 48, 65, 63, 199, 34, 233, 157, 154, 26, 4, 8, 253, 197, 155, 134, 67, 91, 178, 125, 117, 119, 196, 76, 16, 92, 36, 221, 69, 234, 9, 228, 38, 184, 218, 216, 199, 102, 175, 25, 43, 19, 219, 208, 52, 13, 183, 230, 207, 190, 194, 221, 220, 3, 197, 233, 44, 71, 200, 173, 20, 60, 41, 209 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@gmail.com",
                            PasswordHash = new byte[] { 174, 206, 160, 124, 61, 198, 209, 172, 90, 182, 229, 52, 49, 1, 48, 194, 171, 41, 59, 20, 3, 160, 128, 187, 31, 250, 239, 200, 90, 116, 65, 183, 216, 116, 227, 66, 215, 21, 73, 31, 241, 160, 220, 68, 174, 48, 72, 48, 71, 244, 147, 148, 185, 236, 153, 79, 10, 105, 41, 232, 42, 188, 4, 216 },
                            PasswordSalt = new byte[] { 236, 61, 58, 198, 119, 225, 175, 244, 46, 19, 26, 166, 103, 92, 141, 52, 101, 136, 203, 201, 157, 210, 219, 255, 45, 128, 125, 0, 253, 164, 74, 90, 87, 166, 227, 44, 124, 106, 197, 92, 195, 117, 44, 225, 36, 33, 8, 227, 159, 221, 229, 184, 173, 59, 206, 25, 44, 249, 214, 105, 156, 68, 237, 199, 130, 190, 63, 223, 91, 40, 220, 182, 192, 121, 190, 94, 216, 137, 249, 252, 86, 127, 88, 146, 66, 208, 40, 4, 145, 20, 220, 187, 64, 191, 146, 186, 126, 235, 17, 145, 226, 178, 163, 210, 69, 19, 69, 144, 60, 253, 131, 10, 3, 1, 221, 151, 1, 185, 242, 20, 159, 186, 207, 115, 150, 126, 227, 97 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "moderator1@gmail.com",
                            PasswordHash = new byte[] { 85, 84, 126, 75, 150, 104, 217, 46, 176, 180, 180, 223, 58, 65, 148, 196, 131, 12, 1, 142, 44, 7, 19, 148, 186, 193, 3, 129, 98, 230, 175, 111, 39, 244, 183, 72, 48, 184, 193, 45, 79, 218, 164, 80, 223, 91, 58, 49, 124, 38, 193, 92, 76, 117, 116, 51, 35, 235, 88, 135, 99, 144, 190, 9 },
                            PasswordSalt = new byte[] { 42, 120, 61, 126, 103, 44, 40, 60, 207, 212, 200, 224, 67, 232, 224, 219, 212, 250, 202, 152, 254, 227, 144, 145, 47, 117, 224, 30, 17, 168, 243, 32, 154, 164, 140, 198, 82, 155, 126, 196, 41, 154, 168, 84, 28, 73, 1, 247, 150, 21, 160, 186, 7, 141, 127, 0, 85, 211, 215, 11, 245, 6, 106, 212, 44, 177, 47, 23, 64, 254, 169, 156, 48, 12, 18, 82, 203, 39, 142, 190, 252, 186, 119, 88, 236, 245, 48, 4, 217, 24, 46, 113, 140, 54, 112, 31, 105, 193, 2, 17, 173, 222, 197, 41, 27, 135, 233, 16, 183, 150, 150, 86, 108, 152, 167, 178, 67, 14, 138, 103, 194, 133, 213, 129, 159, 28, 90, 190 },
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin1@gmail.com",
                            PasswordHash = new byte[] { 168, 96, 246, 82, 122, 163, 18, 166, 62, 201, 154, 209, 143, 65, 113, 62, 16, 203, 16, 4, 30, 199, 65, 87, 75, 219, 136, 186, 81, 251, 52, 121, 211, 61, 14, 134, 251, 81, 191, 172, 48, 77, 115, 51, 5, 238, 249, 217, 241, 87, 51, 4, 185, 114, 207, 129, 181, 19, 71, 29, 223, 140, 88, 180 },
                            PasswordSalt = new byte[] { 14, 138, 44, 139, 159, 19, 95, 103, 165, 14, 88, 202, 134, 164, 102, 14, 36, 54, 19, 15, 118, 45, 143, 175, 76, 56, 90, 84, 148, 2, 183, 134, 56, 149, 114, 64, 76, 117, 103, 126, 60, 24, 156, 189, 105, 119, 25, 195, 102, 134, 233, 43, 176, 53, 55, 159, 99, 67, 22, 188, 80, 90, 37, 227, 120, 143, 197, 33, 46, 133, 3, 247, 220, 46, 129, 39, 72, 223, 127, 168, 111, 148, 34, 5, 95, 171, 167, 181, 216, 103, 35, 25, 119, 161, 184, 165, 92, 213, 213, 207, 182, 148, 156, 48, 170, 32, 49, 109, 5, 28, 165, 50, 12, 171, 236, 196, 205, 168, 38, 189, 174, 32, 106, 88, 134, 227, 5, 9 },
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Account.Account", b =>
                {
                    b.HasOne("DAL.Entities.Account.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Account.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
